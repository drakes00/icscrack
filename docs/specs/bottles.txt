[TOPOLOGY]

Server bottleFactory = {
    ip          = 127.0.0.1,
    port        = 520,
    protocol    = MODBUS,

    sensors   = {
        levelSensor     = (Holding, 0x1)    # Bottle filled or not.
        bottleInPlace   = (Holding, 0x2)    # Bottle in place or not.
        processRun      = (Holding, 0x10)   # Whole process running or not.
    }

    actuators = {
        motor           = (Holding, 0x3)    # Conveyor belt running or not.
        nozzle          = (Holding, 0x4)    # Pouring liquid or not.
    }

    behavior    = {
        states  = {Iddle, Moving, Pouring},
        start   = Iddle,
        inputs  = sensors,   # Not exactly sensors by the assignation of a value to a sensor ?
        outputs = actuator,  # Not exactly sensors by the assignation of a value to an activator ?

        transFunc = {
            Iddle   --[processRun := True]->    Moving,
            Moving  --[bottleInPlace := True]-> Pouring,
            Pouring --[bottleFilled := True]->  Moving,
            Moving  --[processRun := False]->   Iddle,
            Pouring --[processRun := False]->   Iddle
        }

        outputFunc = {
            Iddle   --[(motor := True, nozzle := False)]->  Moving,
            Moving  --[(motor := False, nozzle := True)]->  Pouring,
            Pouring --[(motor := True, nozzle := False)]->  Moving,
            Moving  --[(motor := False, nozzle := False)]-> Iddle,
            Pouring --[(motor := False, nozzle := False)]-> Iddle
        }
    }
}

Client hmi = {
    ip          = 127.0.0.1

    sensors   = {
        levelSensor     = (Holding, 0x1)    # Bottle filled or not.
        bottleInPlace   = (Holding, 0x2)    # Bottle in place or not.
        motor           = (Holding, 0x3)    # Conveyor belt running or not.
        nozzle          = (Holding, 0x4)    # Pouring liquid or not.
    }

    actuators = {
        processRun      = (Holding, 0x10)   # Whole process running or not.
    }

    behavior    = {
        states  = {Iddle, Running},
        start   = Iddle,
        inputs  = sensors,
        outputs = activators,

        transFunc = {
            Iddle --[*]-> Running
        }

        outputFunc = {
            Iddle --[processRun := True]-> Running
        }
    }
}

Channel chan = {
    server  = bottleFactory,
    client  = hmi
}

[PROTOCOLS_SECURITY_FEATURES]

Protocol MODBUS = {
    OpCode READ = {
        request  = (READ, var),
        response = (READ, val)
    }

    OpCode WRITE = {
        request  = (WRITE, var, val),
        response = (WRITE, var, val)
    }

    security = None
}

[SAFETY_PROPERTIES_TO_CHECK]

ALWAYS (
    bottleFactory.actuators.nozzle == False
    OR (
        bottleFactory.sensors.bottleInPlace == True
        AND bottleFactory.actuators.motor == False
    )
)

[INTRUDER]

# Read variable request forging:
var :- (READ, var).

# Read variable response forging:
var :- (READ, val).

# Write variable request forging:
var, val :- (WRITE, var, val).

# Write variable response forging:
var, val :- (WRITE, var, val).

# READ request alteration:
(READ, _), var :- (READ, var).

# READ response alteration:
(READ, _), val :- (READ, val).

# WRITE request alteration:
(WRITE, _, _), var, val :- (WRITE, var, val).

# WRITE response alteration:
(WRITE, _, _), var, val :- (WRITE, var, val).

# Invert a boolean in a READ response:
(READ, b) :- (READ, not b)

# Invert a boolean in a WRITE request:
(WRITE, var, b) :- (WRITE, var, not b)

# Invert a boolean in a WRITE response:
(WRITE, var, b) :- (WRITE, var, not b)
