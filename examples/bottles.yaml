topology:
    servers:
         bottleFactory: &bottleFactory
            ip: 127.0.0.1,
            port: 5020,
            protocol: Modbus,
            variables:
                level:          &level          !!python/tuple [HoldingRegister, 0x01] # Bottle filled or not.
                bottleInPlace:  &bottleInPlace  !!python/tuple [HoldingRegister, 0x02] # Bottle in place or not.
                motor:          &motor          !!python/tuple [HoldingRegister, 0x03] # Conveyor belt running or not.
                nozzle:         &nozzle         !!python/tuple [HoldingRegister, 0x04] # Pouring liquid or not.
                processRun:     &processRun     !!python/tuple [HoldingRegister, 0x10] # Whole process running or not.

            behavior:
                states: [Iddle, Moving, Pouring]
                start: Iddle
                inputs: [*level, *bottleInPlace, *processRun]
                outputs: [*motor, *nozzle]

                transFunc: {
                    !!python/tuple [Iddle, !!python/tuple [!!python/tuple [*processRun, True], !!python/tuple [*bottleInPlace, False]]]: Moving,
                    !!python/tuple [Iddle, !!python/tuple [!!python/tuple [*processRun, True], !!python/tuple [*bottleInPlace, True]]]: Pouring,
                    !!python/tuple [Moving, !!python/tuple [!!python/tuple [*level, False], !!python/tuple [*bottleInPlace, True]]]: Pouring,
                    !!python/tuple [Pouring, !!python/tuple [!!python/tuple [*level, True], !!python/tuple [*bottleInPlace, False]]]: Moving,
                    !!python/tuple [Moving, !!python/tuple [!!python/tuple [*processRun, False]]]: Iddle,
                    !!python/tuple [Pouring, !!python/tuple [!!python/tuple [*processRun, False]]]: Iddle
                }

                outputFunc: {
                    !!python/tuple [Iddle, Moving]:   [!!python/tuple [*motor, True],  !!python/tuple [*nozzle, False]],
                    !!python/tuple [Iddle, Pouring]:  [!!python/tuple [*motor, False], !!python/tuple [*nozzle, True ]],
                    !!python/tuple [Moving, Pouring]: [!!python/tuple [*motor, False], !!python/tuple [*nozzle, True ]],
                    !!python/tuple [Pouring, Moving]: [!!python/tuple [*motor, True],  !!python/tuple [*nozzle, False]],
                    !!python/tuple [Moving, Iddle]:   [!!python/tuple [*motor, False], !!python/tuple [*nozzle, False]],
                    !!python/tuple [Pouring, Iddle]:  [!!python/tuple [*motor, False], !!python/tuple [*nozzle, False]]
                }

                assert:
                    "(nozzle ==> not motor && bottle & not level)"

    clients:
        hmi: &hmi
            ip: 127.0.0.1
            behavior:
                states: [Iddle, Running]
                start: Iddle
                inputs: [*level, *bottleInPlace, *motor, *nozzle]
                outputs: [*processRun]

                transFunc: {
                    !!python/tuple [Iddle, !!python/tuple []]: Running
                }

                outputFunc: {
                    !!python/tuple [Iddle, Running]: [!!python/tuple [*processRun, True]]
                }

    channels:
        chan:
            server: *bottleFactory
            client: *hmi


#protocols:
#    modbus: {
#        funcCodes: {
#            read: {
#                request: (read, var),
#                response: (read, val)
#            },
#
#            write: {
#                request: (write, var, val),
#                response: (write, var, val)
#            },
#
#            security: None
#        }
#    }
#
#[SAFETY_PROPERTIES_TO_CHECK]
#
#ALWAYS (
#    bottleFactory.actuators.nozzle == False
#    OR (
#        bottleFactory.sensors.bottleInPlace == True
#        AND bottleFactory.actuators.motor == False
#    )
#)
#
#[INTRUDER]
#
## Read variable request forging:
#var :- (read, var).
#
## Read variable response forging:
#var :- (read, val).
#
## Write variable request forging:
#var, val :- (write, var, val).
#
## Write variable response forging:
#var, val :- (write, var, val).
#
## read request alteration:
#(read, _), var :- (read, var).
#
## read response alteration:
#(read, _), val :- (read, val).
#
## write request alteration:
#(write, _, _), var, val :- (write, var, val).
#
## write response alteration:
#(write, _, _), var, val :- (write, var, val).
#
## Invert a boolean in a read response:
#(read, b) :- (read, not b)
#
## Invert a boolean in a write request:
#(write, var, b) :- (write, var, not b)
#
## Invert a boolean in a write response:
#(write, var, b) :- (write, var, not b)
